<!-- Cookie Consent Banner -->
<div id="cookie-consent-box" class="cookie-consent-box" style="display: none; opacity: 0;">
    <div class="container d-flex flex-column flex-md-row justify-content-between align-items-center gap-3 py-3">
        <div class="text-white small">
            Bu web sitesi deneyiminizi iyileştirmek için çerezleri kullanır. Tercihlerinizi özelleştirmek için <button id="btn-cookie-settings" class="btn btn-link text-decoration-underline p-0 text-white">çerez ayarları</button> bölümünü ziyaret edebilirsiniz.
        </div>
        <div>
            <button id="btn-cookie-consent-accept" class="btn btn-success btn-sm me-2">Tümünü Kabul Et</button>
        </div>
    </div>
</div>

<!-- Cookie Settings Popup -->
<div id="cookie-settings-popup" class="cookie-settings-popup" style="display: none;">
    <div class="cookie-settings-content bg-white p-4 rounded shadow-lg">
        <h5>Çerez Tercihleri</h5>
        <p>Hangi çerezlerin kullanılmasına izin vereceğinizi seçebilirsiniz.</p>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="performance-cookies" checked>
            <label class="form-check-label" for="performance-cookies">
                Performans Çerezleri
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="targeting-cookies" checked>
            <label class="form-check-label" for="targeting-cookies">
                Hedefleme Çerezleri
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="functional-cookies" checked>
            <label class="form-check-label" for="functional-cookies">
                Fonksiyonel Çerezler
            </label>
        </div>
        <div class="mt-3 d-flex justify-content-end gap-2">
            <button id="btn-close-settings" class="btn btn-secondary btn-sm">Vazgeç</button>
            <button id="btn-save-settings" class="btn btn-primary btn-sm">Ayarları Kaydet</button>
        </div>
    </div>
</div>

<!-- Stil -->
<style>
    .cookie-consent-box {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: #222;
        color: white;
        z-index: 9999;
        transition: opacity 0.5s ease;
    }

    .cookie-settings-popup {
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 10000;
        justify-content: center;
        align-items: center;
        display: none;
    }

    .cookie-settings-content {
        max-width: 400px;
        width: 100%;
    }
</style>

<!-- Script -->
<script>
    let constants = {
        storageKey: "cookiePreferences",
        selectors: {
            cookieConsentBox: "#cookie-consent-box",
            acceptButton: "#btn-cookie-consent-accept",
            saveSettingsButton: "#btn-save-settings",
            closeSettingsButton: "#btn-close-settings",
            cookieSettingsButton: "#btn-cookie-settings",
            cookieSettingsPopup: "#cookie-settings-popup",
            performanceCookies: "#performance-cookies",
            targetingCookies: "#targeting-cookies",
            functionalCookies: "#functional-cookies",
        },
        events: {
            click: "click",
        },
    };

    const hideCookieConsentBox = () => {
        const box = $(constants.selectors.cookieConsentBox);
        box.css("opacity", "0");
        setTimeout(() => {
            box.css("display", "none");
        }, 500);
    };

    const showCookieConsentBox = () => {
        const box = $(constants.selectors.cookieConsentBox);
        box.css("display", "block");
        setTimeout(() => {
            box.css("opacity", "1");
        }, 100);
    };

    const setCookiePreferences = (preferences) => {
        localStorage.setItem(constants.storageKey, JSON.stringify(preferences));
    };

    const getCookiePreferences = () => {
        return JSON.parse(localStorage.getItem(constants.storageKey) ?? null);
    };

    const userAcceptedCookies = () => {
        const preferences = getCookiePreferences();
        return preferences && preferences.accepted;
    };

    $(document).ready(() => {
        const cookieBox = $(constants.selectors.cookieConsentBox);
        const settingsPopup = $(constants.selectors.cookieSettingsPopup);

        if (userAcceptedCookies()) {
            hideCookieConsentBox();
        }

        $(constants.selectors.acceptButton).on(constants.events.click, () => {
            setCookiePreferences({
                performance: true,
                targeting: true,
                functional: true,
                accepted: true,
            });
            hideCookieConsentBox();
        });

        $(constants.selectors.cookieSettingsButton).on(constants.events.click, () => {
            const preferences = getCookiePreferences();
            if (preferences) {
                $(constants.selectors.performanceCookies).prop("checked", preferences.performance);
                $(constants.selectors.targetingCookies).prop("checked", preferences.targeting);
                $(constants.selectors.functionalCookies).prop("checked", preferences.functional);
            }
            settingsPopup.css("display", "flex");
        });

        $(constants.selectors.closeSettingsButton).on(constants.events.click, () => {
            settingsPopup.css("display", "none");
        });

        $(constants.selectors.saveSettingsButton).on(constants.events.click, () => {
            const performance = $(constants.selectors.performanceCookies).prop("checked");
            const targeting = $(constants.selectors.targetingCookies).prop("checked");
            const functional = $(constants.selectors.functionalCookies).prop("checked");

            setCookiePreferences({
                performance,
                targeting,
                functional,
                accepted: true,
            });

            settingsPopup.css("display", "none");
            hideCookieConsentBox();
        });

        $(document).scroll(() => {
            if ($(document).scrollTop() > 250 && !userAcceptedCookies()) {
                showCookieConsentBox();
            }
        });
    });
</script>
